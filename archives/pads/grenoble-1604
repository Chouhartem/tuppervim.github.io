    Autojump : https://github.com/wting/autojump
    tmuxnavigator
    Bash/Zsh/... : dans un terminal bien configuré : alt+"touche point" -> insérer le dernier argument de la cmd précédente
    tmux-navigator = plugin pour avoir les mêmes raccourcis de déplacement de fenêtre entre Vim et tmux
    en vrac : magit, comitIA, fugitive, git commit -v
Notes
set numbers
syntax on
touche o quand on a fait une sélection
persistant undo : pour pouvoir défaire les modifications même avant la dernière sauvegarde

    :e! force à recharger depuis le disque

let &directory = ~/swap/ "swap files
let & backupdir = ~/back "baclup vg
controle-d/u : avancer/reculer d'une demi page
les texts objects : c'est très pratique pour se déplacer. Tester vap et dap
les accolades pour se déplacer entre paragraphes

augroup encrypted
  au!
  " Disable swap files, and set binary file format before reading the file
  autocmd BufReadPre,FileReadPre *.gpg
    \ setlocal noswapfile bin
  " Decrypt the contents after reading the file, reset binary file format
  " and run any BufReadPost autocmds matching the file name without the .gpg
  " extension
  autocmd BufReadPost,FileReadPost *.gpg
    \ execute "'[,']!gpg --decrypt --default-recipient-self 2> /dev/null" |
    \ setlocal nobin |
    \ execute "doautocmd BufReadPost " . expand("%:r")
  " Set binary file format and encrypt the contents before writing the file
  autocmd BufWritePre,FileWritePre *.gpg
    \ setlocal bin |
    \ '[,']!gpg --encrypt --default-recipient-self
  " After writing the file, do an :undo to revert the encryption in the
  " buffer, and reset binary file format
  autocmd BufWritePost,FileWritePost *.gpg
    \ silent u |
    \ setlocal nobin
augroup END

Tabulations / espaces selon le type de fichier :

augroup indents
  autocmd FileType ?akefile set noexpandtab
  autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
augroup END

autocmd : automatiser des tâches sur certains fichiers, ex : auto-rechargement de .vimrc
autogroup (augroup) : groupe les autocomands pour ne pas répéter l'action inutilement

set formatoptions+=j
gJ
set nojoinspaces : enlève l'espace quand on joint des lignes avec J
gq auto-wraper selon la variable textwidth

gp : coller et mettre le curseur après le dernier bout de texte collé


ctrl+w s : split horizontal
ctrl+w v : split vertical
ctrl+w c : fermer une fenêtre vim
ctrl+w w : aller à la fenetre suivante
ctrl+w h/j/k/l : se deplacer dans la fenêtre à gauche/bas/haut/droite


ctrl+w [N] +/- : agrandir/rétrécir la fenêtre [de N lignes]

    voir aussi :vresize N et :resize N

ctrl+w = : mettre les fenêtres de la ligne/colonne à la même taille
ctrl+w o : ne garder que la fenêtre actuelle

" This works but always selects the last tab when Vim is resized:
" autocmd VimResized * tabdo wincmd =
function! AutoResizeWindows()
  let tabnr = tabpagenr()
  tabdo wincmd =
  exe "tabnext " . tabnr
endfunction
augroup resizeGroup
  autocmd VimResized * call AutoResizeWindows()
augroup 

ctrl+w  _
ctrl+w |

gf : ouvrir le fichier dont le chemin est sous le curseur

Buffers : a essayer 
 :ls pour les lister

 :b chaine : afficher le buffer dont le nom contient la chaine chaine

 ctrl+o
 
 0 : aller au début de la ligne
 ^ : aller au 1er caractère non vide
 
 ma ajoute un marqueur
 'a pour y retourner
 '. dernière ligne modifiée
 note : marqueur en minuscule local au fichier, marque en MAJUSCULE global à vim
 
 Plugins : 
 quickfixsigns - configuration recommandée :
set lazyredraw
let g:quickfixsigns_events =
  \ ['BufEnter', 'CursorHold', 'CursorMoved', 'InsertLeave', 'InsertChange']
NeoBundle 'tomtom/quickfixsigns_vim'

Visualiser les caractères non imprimables :
    set list listchars=nbsp:·,tab:¬·,trail:¤,extends:▶,precedes:◀
    
SearchParty by dahu : sauter à la prochaine occurrence du mot sélectionné
NeoBundle 'dahu/vim-fanfingtastic' pour que fFtT fonctionnent aussi en multi-lignes

